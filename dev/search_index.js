var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Verilog","category":"page"},{"location":"#Verilog.jl","page":"Home","title":"Verilog.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Verilog.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Verilog]","category":"page"},{"location":"#Verilog.RelativeRange","page":"Home","title":"Verilog.RelativeRange","text":"RelativeRange\n\nis a range object that can take values which can be relative to the most   significant bit.\n\n\n\n\n\n","category":"type"},{"location":"#Verilog.VerilogRange","page":"Home","title":"Verilog.VerilogRange","text":"VerilogRange\n\nis a range object that represents a verilog range.  These are declared by   using the v ranges, so 5:0v is a VerilogRange from 0 to 5.\n\n\n\n\n\n","category":"type"},{"location":"#Verilog.Wire","page":"Home","title":"Verilog.Wire","text":"Wire{R}\n\nis the basic type for Verilog operations.  R specifies a \"unit range\" of integers.   Use the \"v\" suffix to enable verilog-style ranging.\n\nWire{3:0v} declares a four-digit verilog wire with indices spanning from 0->3;   Wire{6:2v} declares a five-bit verilog wire with indices spanning from   2->6.\n\n\n\n\n\n","category":"type"},{"location":"#Verilog.msb","page":"Home","title":"Verilog.msb","text":"msb\n\nis a special keyword which indicates that the value should go to the most   significant bit.  There is no equivalent \"lsb\", since in most cases this will   be a fairly easy-to-reference value.  Plan your code accordingly.\n\nFor example:   mywire[16:0v] = Wire(0xF000, 16)   mywire[msb:12]              # ==> Wire{3:0v}(0xF)\n\nmywire2[16:0v] = Wire(0x0F00, 16)   my_wire[(msb-4):(msb-8)]     # ==> Wire{3:0v}(0xF)\n\n\n\n\n\n","category":"type"},{"location":"#Verilog.v","page":"Home","title":"Verilog.v","text":"v\n\nis an appendage that reverses the order of julia's ranges so that they have   the cosmetic appearance of a verilog range.  This can be used both in setters   and getters for wire collections.\n\nFor example:   my_wire[5:0v]  references a wire over indices 0-5   my_wire[6:2v]  references a wire over indices 2-6\n\nFor dereferencing (getting) you can reverse this:   my_wire[2:6v]  references the wire over indices 2-6 with the msb order reversed.\n\nif you are using a variable, be sure to put the value in paretheses.\n\nFor example:\n\nmy_wire[bits:(bits-4)v]\n\n\n\n\n\n","category":"type"},{"location":"#Verilog.find_dependencies","page":"Home","title":"Verilog.find_dependencies","text":"Verilog.find_dependencies(mod, (params...))\n\noutputs the set of dependencies of a certain module.\n\n\n\n\n\n","category":"function"},{"location":"#Verilog.generate_verilog_file-Tuple{String, Function, Tuple}","page":"Home","title":"Verilog.generate_verilog_file","text":"generate_verilog_file(path, mod, (params...); exclude = [])\n\npass this function a path, (verilog module) name and the parameters, and it   puts that module and its dependencies into a file in the desired path.  The   filename will be (module name + suffix).v, with module name & suffix as   generated by the interal specifications.\n\n\n\n\n\n","category":"method"},{"location":"#Verilog.verilate-Tuple{Function, Tuple}","page":"Home","title":"Verilog.verilate","text":"verilate(mod::Function, p::Tuple)   uses verilator to create a .so file corresponding to the library.   Each of the functions in the mods array will be the top-level element   in a freestanding .v file.  They may refer to each other.   the \"mods\" are a tuple of the function and the parameter.\n\nPassed options:     path::String      - defaults to \".\" - the library .so file will be placed in the path.     libname::String   - file name for the library.  Defaults to libVerilated-[functionwithsuffix].so     with_source::Bool - defaults to \"false\" - should the c source be included?                         this is useful if you're building a library around the                         verilated module.\n\n\n\n\n\n","category":"method"},{"location":"#Verilog.verilator_adapter-Tuple{Any}","page":"Home","title":"Verilog.verilator_adapter","text":"Verilog.verilator_adapter(id)\n\ncreates the required C file for verilation.\n\n\n\n\n\n","category":"method"},{"location":"#Verilog.@input-Tuple{Any, Any}","page":"Home","title":"Verilog.@input","text":"@input identifier rangedescriptor\n\nbinds an input to a given range descriptor.\n\n\n\n\n\n","category":"macro"},{"location":"#Verilog.@verilate","page":"Home","title":"Verilog.@verilate","text":"@verilate function parameters [path]\n\nverilates a @verilog function with the passed parameter and places the shared   object library into [path].  By default, the path used is going to be   \"./libVerilated-[function].so\".\n\nthe function is then hooked up to a function with signature []\n\n\n\n\n\n","category":"macro"}]
}
